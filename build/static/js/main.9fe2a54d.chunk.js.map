{"version":3,"sources":["index.js"],"names":["__webpack_require__","r","__webpack_exports__","picture","document","getElementById","header","instructor","innerHTML","require","setBackend","faceapi","image","cameraControl","display","getElementsByTagName","camera","window","navigator","mozCameras","getListOfCameras","options","pictureOptions","pictureSize","fileFormat","onError","error","console","warn","showPreview","release","getCamera","then","cameraObj","mozSrcObject","play","randExpression","reqExpression","Math","floor","random","Promise","all","nets","faceRecognitionNet","loadFromUri","faceLandmark68TinyNet","faceExpressionNet","tinyFaceDetector","localStorage","getItem","log","addEventListener","onPictureTaken","blob","blobURL","URL","createObjectURL","newImage","Image","src","detection","detectSingleFace","TinyFaceDetectorOptions","withFaceLandmarks","withFaceDescriptor","dtn","descriptor","data","JSON","stringify","myStorage","setItem","location","reload","onPictureNotTaken","capabilities","pictureSizes","fileformat","fileFormats","takePicture","result","descriptions","descriptorArray","parse","x","push","floatArray","Float32Array","from","labeledFaceDescriptors","LabeledFaceDescriptors","faceMatcher","FaceMatcher","withFaceExpressions","sorted","expressions","asSortedArray","expression","probability","findBestMatch","distance","alert","authenticate"],"mappings":"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","file":"static/js/main.9fe2a54d.chunk.js","sourcesContent":["// import l10n.js first\nimport 'kaios-gaia-l10n';\nimport './index.css';\n\nconst picture = document.getElementById('picture');\nconst header = document.getElementById('headertext');\nconst instructor = document.getElementById('instructortext');\n\ninstructor.innerHTML = \"Loading\";\n\nconst tf = require('@tensorflow/tfjs')\ntf.setBackend('cpu')\nconst faceapi = require('@vladmandic/face-api/dist/face-api.node-cpu.js')\n\nvar image = null\nvar cameraControl = null\nvar display = document.getElementsByTagName('video')[0]\nvar camera = window.navigator.mozCameras.getListOfCameras()[1]\nvar options = {}\nvar pictureOptions = {\n  pictureSize: null,\n  fileFormat: null\n}\n\nfunction onError(error) {\n  console.warn(error);\n}\n\nfunction showPreview() {\n  if (cameraControl != null) {\n    cameraControl.release()\n  }\n\n  function onPrevSuccess(cameraObj) {\n    cameraControl = cameraObj.camera\n    display.mozSrcObject = cameraControl\n    display.play()\n  }\n  \n  navigator.mozCameras.getCamera(camera, options).then(onPrevSuccess, onError);\n}\n\nPromise.all([\n  faceapi.nets.faceRecognitionNet.loadFromUri('./models'),\n  faceapi.nets.faceLandmark68TinyNet.loadFromUri('./models'),\n  faceapi.nets.faceExpressionNet.loadFromUri('./models'),\n  faceapi.nets.tinyFaceDetector.loadFromUri('./models')\n]).then(start);\n\nfunction start() {\n  var myStorage = window.localStorage\n  if (myStorage.getItem('descriptor') == null) {\n    enrol()\n  } else {\n    authenticate()\n  }\n}\n\nfunction enrol() {\n\n  header.innerHTML = \"Enrol\";\n  console.log('Ready')\n\n  showPreview()\n  instructor.innerHTML = \"Take Picture\";\n\n  picture.addEventListener('click', () => {\n\n    instructor.innerHTML = \"Hold\";\n\n    function onPictureTaken(blob) {\n      instructor.innerHTML = \"Working\";\n      console.log(blob)\n      var blobURL = URL.createObjectURL(blob)\n      var newImage = new Image()\n      newImage.src = blobURL\n      image = newImage\n      // document.body.style.backgroundImage = \"url('\" + blobURL + \"')\"\n  \n      console.log('Image loaded')\n      console.log(image)\n  \n      var detection = faceapi.detectSingleFace(image, new faceapi.TinyFaceDetectorOptions())\n      .withFaceLandmarks(true).withFaceDescriptor()\n  \n      detection.then((dtn) => {\n\n        console.log(dtn.descriptor)\n\n        var data = JSON.stringify(dtn.descriptor)\n        console.log('saving...')\n        var myStorage = window.localStorage\n        myStorage.setItem('descriptor', data)\n  \n        instructor.innerHTML = \"Done\";\n  \n        window.location.reload()\n      });\n    }\n\n    function onPictureNotTaken(error) {\n      instructor.innerHTML = \"Camera Error\";\n    }\n  \n    function onPicSuccess(cameraObj) {\n      cameraControl = cameraObj.camera\n      pictureOptions.pictureSize = cameraControl.capabilities.pictureSizes[0]\n      pictureOptions.fileformat  = cameraControl.capabilities.fileFormats[0]\n  \n      cameraControl.takePicture(pictureOptions).then(onPictureTaken, onPictureNotTaken)\n    }\n\n    cameraControl.release()\n    navigator.mozCameras.getCamera(camera, options).then(onPicSuccess, onError);\n  })\n}\n\nfunction authenticate() {\n\n  header.innerHTML = \"Authenticate\";\n  \n  var myStorage = window.localStorage\n  var result = myStorage.getItem('descriptor')\n  var descriptions = []\n  var descriptorArray = JSON.parse(result)\n  for (let x in descriptorArray) {\n    descriptions.push(descriptorArray[x])\n  }\n  var floatArray = Float32Array.from(descriptions)\n  descriptions = []\n  descriptions.push(floatArray)\n\n  var labeledFaceDescriptors =  new faceapi.LabeledFaceDescriptors('john', descriptions)\n  const faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, 0.4)\n\n  var reqExpression = randExpression()\n  console.log('Loaded')\n\n  showPreview()\n  // instructor.innerHTML = \"Take Picture\";\n\n  picture.addEventListener('click', () => {\n\n    instructor.innerHTML = \"Hold\";\n\n    function onPictureTaken(blob) {\n      instructor.innerHTML = \"Working\";\n      var blobURL = URL.createObjectURL(blob)\n      var newImage = new Image()\n      newImage.src = blobURL\n      image = newImage\n      // document.body.style.backgroundImage = \"url('\" + blobURL + \"')\"\n  \n      console.log('Image loaded')\n      console.log(image)\n  \n      var detection = faceapi.detectSingleFace(image, new faceapi.TinyFaceDetectorOptions())\n      .withFaceLandmarks(true).withFaceExpressions().withFaceDescriptor()\n\n      detection.then((dtn) => {\n\n        console.log(dtn.descriptor)\n        const minConfidence = 0.4\n        var sorted = dtn.expressions.asSortedArray()\n\n        console.log(sorted[0].expression)\n\n        if (sorted[0].probability >= minConfidence && sorted[0].expression === reqExpression)\n        {\n          const result = faceMatcher.findBestMatch(dtn.descriptor)\n          const distance = result['distance']\n          if (distance <= 0.4) \n          {\n            alert('User Verified')\n          } \n          else\n          {\n            alert('Verification failed. \\nTry again.')\n            reqExpression = randExpression()\n          }\n        }\n        else \n        {\n          alert('Liveness Test Failed. \\nTry again')\n          reqExpression = randExpression()\n        }\n      });\n    }\n\n    function onPictureNotTaken(error) {\n      instructor.innerHTML = \"Camera Error\";\n    }\n  \n    function onPicSuccess(cameraObj) {\n      cameraControl = cameraObj.camera\n      pictureOptions.pictureSize = cameraControl.capabilities.pictureSizes[0]\n      pictureOptions.fileformat  = cameraControl.capabilities.fileFormats[0]\n  \n      cameraControl.takePicture(pictureOptions).then(onPictureTaken, onPictureNotTaken)\n    }\n\n    cameraControl.release()\n    navigator.mozCameras.getCamera(camera, options).then(onPicSuccess, onError);\n  })\n}\n\nfunction randExpression() {\n  const expressionArray = ['neutral', 'happy', 'sad', 'angry', 'surprised'];\n  var rand = Math.floor(Math.random() * 5)\n  var reqExpression = expressionArray[rand]\n  instructor.innerHTML = \"Show \" + reqExpression + \" expression\";\n  return reqExpression\n}\n"],"sourceRoot":""}